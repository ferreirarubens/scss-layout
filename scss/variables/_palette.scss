$huesBasic: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900;
$hues: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700;

@mixin mat-color-bg(
  $palette,
  $key,
  $onlyBasic: false,
  $blackWhite: false,
  $withContrastColor: true,
  $onlyText: false
) {
  &-#{$key} {
    @if ($blackWhite) {
      @if not($onlyText) {
        background-color: #{map-get($map: $palette, $key: 700)} !important;
      }
      @if ($withContrastColor or $onlyText) {
        @if ($onlyText) {
          color: #{map-get($map: $palette, $key: 700)} !important;
        } @else {
          color: #{map-get(
              $map: map-get($map: $palette, $key: contrast),
              $key: 700
            )} !important;
        }
      }
    } @else {
      @if not($onlyText) {
        background-color: #{map-get($map: $palette, $key: 500)} !important;
      }
      @if ($withContrastColor or $onlyText) {
        @if ($onlyText) {
          color: #{map-get($map: $palette, $key: 500)} !important;
        } @else {
          color: #{map-get(
              $map: map-get($map: $palette, $key: contrast),
              $key: 500
            )} !important;
        }
      }
    }

    @if ($blackWhite) {
      &-700 {
        @if not ($onlyText) {
          background-color: #{map-get($map: $palette, $key: 700)} !important;
          color: #{map-get(
            $map: map-get($map: $palette, $key: contrast),
            $key: 700
          )} !important;
        }
        @if ($withContrastColor or $onlyText) {
          @if ($onlyText) {
            color: #{map-get($map: $palette, $key: 700)} !important;
          } @else {
            color: #{map-get(
                $map: map-get($map: $palette, $key: contrast),
                $key: 700
              )} !important;
          }
        }
      }
    } @else {
      @each $var in if($onlyBasic, $huesBasic, $hues) {
        &-#{$var} {
          @if not ($onlyText) {
            background-color: #{map-get($map: $palette, $key: $var)} !important;
          }
          @if ($withContrastColor or $onlyText) {
            @if ($onlyText) {
              color: #{map-get($map: $palette, $key: $var)} !important;
            } @else {
              color: #{map-get(
                  $map: map-get($map: $palette, $key: contrast),
                  $key: $var
                )} !important;
            }
          }
        }
      }
    }
  }
}

@mixin material-palette($palette, $key, $onlyBasic: false, $blackWhite: false) {
  .mat-color {
    @include mat-color-bg($palette, $key, $onlyBasic, $blackWhite);

    &-no-text {
      @include mat-color-bg($palette, $key, $onlyBasic, $blackWhite, false);
    }

    &-text {
      @include mat-color-bg(
        $palette,
        $key,
        $onlyBasic,
        $blackWhite,
        false,
        true
      );
    }
  }
}

@function palette-color($palette, $hue: 500) {
  @return map-get($map: $palette, $key: $hue);
}

@function palette-color-contrast($palette, $hue: 500) {
  @return map-get($map: map-get($map: $palette, $key: contrast), $key: $hue);
}

/* @mixin set-theme-primary($palette, $key) {
  button {
    &.btn {
      &.btn-primary {
        background-color: map-get($map: $palette, $key: 500);
        color: map-get($map: map-get($map: $palette, $key: contrast), $key: 500);
      }
    }
    &[color="primary"] {
      background-color: map-get($map: $palette, $key: 500);
      color: map-get($map: map-get($map: $palette, $key: contrast), $key: 500);
    }
  }
}

@mixin set-theme-accent($palette, $main) {
  button {
    &.btn {
      &.btn-accent {
        background-color: map-get($map: $palette, $key: $main);
        color: map-get($map: map-get($map: $palette, $key: contrast), $key: $main);
      }
    }
    &[color="accent"] {
      background-color: map-get($map: $palette, $key: $main);
      color: map-get($map: map-get($map: $palette, $key: contrast), $key: $main);
    }
  }
} */
